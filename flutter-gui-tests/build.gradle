plugins {
  id 'org.jetbrains.intellij' version '0.4.5'
  id 'org.jetbrains.kotlin.jvm' version '1.3.21'
}

group 'io.flutter.tests.gui'
version '1.0-SNAPSHOT'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-reflect"
  testCompile group: 'junit', name: 'junit', version: '4.12'
}


sourceSets {
  main {
    java.srcDir 'src'
    kotlin.srcDir 'src'
    resources.srcDir 'res'
  }
  test {
    java.srcDir 'testSrc'
    kotlin.srcDir 'testSrc'
    resources.srcDir 'testData'
  }
}

intellij {
  plugins 'com.intellij.testGuiFramework:0.9.44.1@nightly', 'Dart:191.5849.16'
  if (System.getProperty("idea.gui.test.alternativeIdePath") != null) {
    alternativeIdePath System.getProperty("idea.gui.test.alternativeIdePath")
  }
  updateSinceUntilBuild false
//  version 'LATEST-TRUNK-SNAPSHOT'
}
kotlin {
  experimental {
    coroutines "enable"
  }
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

task testsJar(type: Jar, dependsOn: classes) {
  classifier = 'tests'
  from sourceSets.test.output
  exclude 'testData/*'
}

prepareSandbox {
  def zipFile = file("$projectDir/../flutter-intellij.zip")
  from zipTree(zipFile)
  into 'flutter-intellij'

  from(testsJar) {
    into "$pluginName/lib"
  }
}

prepareTestingSandbox {
  def zipFile = file("$projectDir/../flutter-intellij.zip")
  from zipTree(zipFile)
  into 'flutter-intellij'

  from(testsJar) {
    into "$pluginName/lib"
  }
}

runIde {
  if (System.getProperty("idea.gui.tests.gradle.runner").equals("true")) {
    systemProperties System.properties.findAll { (it.key as String).startsWith("idea") ||
                                                 (it.key as String).startsWith("jb") }.findAll {
                                                 (it.key as String) != "idea.home.path" &&
                                                 (it.key as String) != "jb.vmOptionsFile"
    }
    /* Need to split the space-delimited value in the exec.args */
    print systemProperties
    args System.getProperty("exec.args", "").split(",")
    print args
  }
}

test {
  def sysProps = System.properties.findAll { (it.key as String).startsWith("idea") ||
                                             (it.key as String).startsWith("jb") &&
                                             (it.key as String) != "idea.home.path" &&
                                             (it.key as String) != "jb.vmOptionsFile"
  }
  sysProps.put("idea.gui.tests.gradle.runner", true) //Use Gradle Launcher to run GUI tests
  systemProperties sysProps
}