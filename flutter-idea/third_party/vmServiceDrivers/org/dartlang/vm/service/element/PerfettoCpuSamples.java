/*
 * Copyright (c) 2015, the Dart project authors.
 *
 * Licensed under the Eclipse Public License v1.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package org.dartlang.vm.service.element;

// This file is generated by the script: pkg/vm_service/tool/generate.dart in dart-lang/sdk.

import com.google.gson.JsonObject;

/**
 * See getPerfettoCpuSamples.
 */
@SuppressWarnings({"WeakerAccess", "unused"})
public class PerfettoCpuSamples extends Response {

  public PerfettoCpuSamples(JsonObject json) {
    super(json);
  }

  /**
   * The maximum possible stack depth for samples.
   */
  public int getMaxStackDepth() {
    return getAsInt("maxStackDepth");
  }

  /**
   * The process ID for the VM.
   */
  public int getPid() {
    return getAsInt("pid");
  }

  /**
   * The number of samples returned.
   */
  public int getSampleCount() {
    return getAsInt("sampleCount");
  }

  /**
   * The sampling rate for the profiler in microseconds.
   */
  public int getSamplePeriod() {
    return getAsInt("samplePeriod");
  }

  /**
   * A Base64 string representing the requested samples in Perfetto's proto format.
   */
  public String getSamples() {
    return getAsString("samples");
  }

  /**
   * The duration of time covered by the returned samples.
   */
  public int getTimeExtentMicros() {
    return getAsInt("timeExtentMicros");
  }

  /**
   * The start of the period of time in which the returned samples were collected.
   */
  public int getTimeOriginMicros() {
    return getAsInt("timeOriginMicros");
  }
}
