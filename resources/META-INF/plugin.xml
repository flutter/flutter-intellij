<!-- Do not edit; instead, modify plugin_template.xml, and run './bin/plugin generate'. -->

<idea-plugin>
  <id>io.flutter</id>
  <name>Flutter</name>
  <description>
    <![CDATA[
    <p>Support for developing Flutter applications. Flutter gives developers an easy and productive
    way to build and deploy cross-platform, high-performance mobile apps for both Android and iOS.
    Installing this plugin will also install the Dart plugin.</p>
    <br>
    <p>For some tools, this plugin uses Chromium through JxBrowser to display content from the web.
    JxBrowser complies with LGPL and offers an option to replace Chromium with another component.
    To do this:</p>
    <li>Find the JxBrowser files stored in the <a href="https://www.jetbrains.com/help/idea/tuning-the-ide.html?_ga=2.242942337.2083770720.1598541288-1470153005.1588544220#plugins-directory">plugins directory</a>, under /flutter-intellij/jxbrowser.</li>
    <li>Use the instructions and build script <a href="http://cloud.teamdev.com/downloads/jxbrowser/7.10/jxbrowser-7.10-relink.zip">from JxBrowser</a> to relink it with modified components.</li>
    ]]>
  </description>
  <!--suppress PluginXmlValidity -->
  <vendor url="https://github.com/flutter/flutter-intellij">flutter.dev</vendor>

  <category>Custom Languages</category>
  <version>SNAPSHOT</version>
  <idea-version since-build="202.7660.26" until-build="212.*"/>

  <depends>com.intellij.modules.platform</depends>
  <depends>com.intellij.modules.lang</depends>
  <depends>com.intellij.modules.xdebugger</depends>
  <depends>com.intellij.modules.coverage</depends>
  <depends>org.jetbrains.plugins.yaml</depends>
  <depends>Dart</depends>
  <depends>Git4Idea</depends>

  <!-- plugin compatibility -->
  <!-- see: http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html -->

  <!-- Contributes IDEA-specific features and implementations. -->
  <depends optional="true" config-file="idea-contribs.xml">com.intellij.modules.java</depends>
  <depends optional="true" config-file="flutter-coverage.xml">com.intellij.modules.coverage</depends>

  <!-- Contributes Android Studio-specific features and implementations. -->
  <!--suppress PluginXmlValidity -->
  <depends optional="true" config-file="studio-contribs.xml">com.intellij.modules.androidstudio</depends>


  <change-notes>
    <![CDATA[
<h1>59.0</h1>
<ul>
  <li>Update installation instructions for Windows</li>
  <li>Make reanalyze() work after packages are removed from icon package list (#5678)</li>
  <li>Optimize icon preview processing for multiple analyses (#5677)</li>
  <li>Handle the new event format for widget recount info (#5671)</li>
  <li>Update to jxbrowser 7.17 (#5675)</li>
  <li>Remove creating flutter_build_mode flag (#5654)</li>
  <li>Remove custom listeners before a project is closed</li>
  <li>Persist tool window open states during project open/close (#5664)</li>
  <li>Use off screen render mode for linux (#5663)</li>
  <li>Add analytics for null analyzer during add breakpoint (#5626)</li>
  <li>Add menu item to Open in AppCode (#5660)</li>
  <li>Disallow iOS builds if not on Mac (#5657)</li>
  <li>Add a field for environment variables to the run config editor (#5656)</li>
  <li>Add mockito to build.gradle (#5645)</li>
  <li>Remove powermock from FlutterView tests and remove non-stack uses (#5644)</li>
  <li>Update docs for yaml plugin (#5642)</li>
  <li>Add mockito library (#5641)</li>
  <li>Stop asking to delete coverage data (#5640)</li>
  <li>Dynamic icon preview of non-standard icon packages (#5595)</li>
  <li>Detect repeated daemon crashes and provide recovery hint (#5638)</li>
  <li>Update live templates to not use double underscores (#5619)</li>
  <li>Fix Android Studio path on Linux (#5605)</li>
  <li>Open source file in Android Studio at exact cursor (#5606)</li>
  <li>Check for project disposal right before organize executes (#5624)</li>
  <li>Skip Flutter tool windows for non-Flutter projects (WIP) (#5622)</li>
  <li>Add force scale option for linux (#5618)</li>
</ul>
<h1>58.0</h1>
<ul>
  <li>Add some NotNull annotations in the FlutterWidgetPerf classes; rev to the latest VM service protocol lib (#5588)</li>
  <li>Check for disposed project before getting embedded browser (#5590)</li>
  <li>Allow open DevTools from tests (#5279)</li>
  <li>Add field for Dart entrypoint in bazel configuration form (#5155)</li>
  <li>Check for initial open state of embedded browser (#5580)</li>
  <li>Send caught exceptions as events (#5576)</li>
  <li>Fix custom component in a presentation update issue (#5577)</li>
  <li>Update build for AS canary (#5575)</li>
  <li>Update jxbrowser to v7.16 (#5574)</li>
  <li>Update the Inspector to prep for changes to the widget transformer (#5570)</li>
  <li>Adapt to breaking API change in 212 (#5567)</li>
  <li>Use 2021.2 for unit tests (#5565)</li>
  <li>Change embedded browser setting (#5561)</li>
  <li>Fix an index out of bounds in FlutterSdk.java (#5559)</li>
  <li>Allow Instance fields to be nullable (#5554)</li>
  <li>Fix a bunch of test failures on Windows (#5553)</li>
  <li>Add a section on configuring a Windows dev env (#5545)</li>
  <li>Display test coverage in the editor (#5544)</li>
  <li>Generate icons from a font file (#5504)</li>
  <li>Add switch to disable notifications (#5539)</li>
  <li>Clean up unused version for bazel (#5535)</li>
  <li>Switch the repo's analysis options to using package:lints (#5534)</li>
  <li>Stop using DevTools URL util method, reorg tests (#5517)</li>
  <li>Update the set of supported IntelliJ versions (#5520)</li>
</ul>
]]>
  </change-notes>

  <!-- Everything following should be SmallIDE-friendly.-->
  <!-- See: http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html -->

  <actions>
    <group id="Flutter.InspectorActions">
      <action id="Flutter.JumpToTypeSource" class="io.flutter.inspector.JumpToTypeSourceAction"
              description="Jump to Type Source"
              text="Jump to Type Source">
        <keyboard-shortcut keymap="$default" first-keystroke="shift F4"/>
      </action>
      <action id="Flutter.JumpToSource" class="io.flutter.inspector.JumpToSourceAction"
              text="Jump to Source">
        <keyboard-shortcut keymap="$default" first-keystroke="control DOWN"/>
      </action>
    </group>

    <group id="Flutter.MainToolbarActions">
      <separator/>
      <action id="Flutter.DeviceSelector" class="io.flutter.actions.DeviceSelectorAction"
              description="Flutter Device Selection"
              icon="FlutterIcons.Phone"/>
      <action id="Flutter.DeviceSelectorRefresher" class="io.flutter.actions.DeviceSelectorRefresherAction"
              text="Refresh Device List"
              description="Refresh device list" />
      <separator/>
      <add-to-group anchor="before" group-id="RunContextGroup" relative-to-action="RunConfiguration"/>
      <add-to-group anchor="before" group-id="ToolbarRunGroup" relative-to-action="RunConfiguration"/>
    </group>

    <group id="FlutterToolsActionGroup" class="io.flutter.actions.FlutterToolsActionGroup" popup="true"
           text="Flutter" description="Flutter Tools" icon="FlutterIcons.Flutter">
      <add-to-group group-id="ToolsMenu" anchor="last"/>
      <action id="flutter.gettingStarted" class="io.flutter.actions.FlutterGettingStartedAction"
              text="Getting Started"
              description="View the online getting started documentation"/>
      <separator/>
      <action id="flutter.upgrade" class="io.flutter.actions.FlutterUpgradeAction"
              text="Flutter Upgrade"
              description="Run 'flutter upgrade'"/>
      <action id="flutter.doctor" class="io.flutter.actions.FlutterDoctorAction"
              text="Flutter Doctor"
              description="Run 'flutter doctor'"/>
      <separator/>
      <action id="flutter.pub.get" class="io.flutter.actions.FlutterPackagesGetAction"
              text="Flutter Pub Get"
              description="Run 'flutter pub get'"/>
      <action id="flutter.pub.upgrade" class="io.flutter.actions.FlutterPackagesUpgradeAction"
              text="Flutter Pub Upgrade"
              description="Run 'flutter pub upgrade'"/>
      <separator/>
      <action id="flutter.clean" class="io.flutter.actions.FlutterCleanAction"
              text="Flutter Clean"
              description="Run 'flutter clean'"/>
      <separator/>
      <action id="flutter.devtools.open" class="io.flutter.run.OpenDevToolsAction"
              text="Open Flutter DevTools"
              description="Open Flutter DevTools"/>
      <separator/>
      <action id="flutter.androidstudio.open" class="io.flutter.actions.OpenInAndroidStudioAction"
              text="Open Android module in Android Studio"
              description="Launch Android Studio to edit the Android module as a top-level project"/>
      <action id="flutter.xcode.open" class="io.flutter.actions.OpenInXcodeAction"
              text="Open iOS module in Xcode"
              description="Launch Xcode to edit the iOS module as a top-level project"/>
      <action id="flutter.appcode.open" class="io.flutter.actions.OpenInAppCodeAction"
              text="Open iOS module in AppCode"
              description="Launch AppCode to edit the iOS module as a top-level project"/>
      <separator/>
      <action id="flutter.submitFeedback" class="io.flutter.actions.FlutterSubmitFeedback"
              text="Submit Feedback..."
              description="Provide feedback for the Flutter plugin"/>
    </group>

    <!-- project explorer actions -->
    <group id="FlutterPackagesExplorerActionGroup" class="io.flutter.actions.FlutterPackagesExplorerActionGroup">
      <separator/>
      <group text="Flutter" description="Flutter Tools" icon="FlutterIcons.Flutter" popup="true">
        <separator/>
        <reference ref="flutter.pub.get"/>
        <reference ref="flutter.pub.upgrade"/>
        <separator/>
        <reference ref="flutter.androidstudio.open"/>
        <reference ref="flutter.xcode.open"/>
        <reference ref="flutter.appcode.open"/>
        <separator/>
        <reference ref="flutter.upgrade"/>
        <reference ref="flutter.doctor"/>
      </group>
      <separator/>
      <add-to-group group-id="ProjectViewPopupMenu" relative-to-action="AddToFavorites" anchor="before"/>
    </group>
    <group id="FlutterExternalIdeActionGroup" class="io.flutter.actions.FlutterExternalIdeActionGroup">
      <separator/>
      <group text="Flutter" description="Flutter Tools" icon="FlutterIcons.Flutter" popup="true">
        <reference ref="flutter.androidstudio.open"/>
        <reference ref="flutter.xcode.open"/>
        <reference ref="flutter.appcode.open"/>
      </group>
      <separator/>
      <add-to-group group-id="ProjectViewPopupMenu" relative-to-action="AddToFavorites" anchor="before"/>
    </group>
    <group id="FlutterBuildActionGroup" class="io.flutter.actions.FlutterBuildActionGroup">
      <separator/>
      <group text="Flutter" popup="true">
        <action id="flutter.build.aar" text="Build AAR" description="Building a Flutter module for Android add-to-app"
                class="io.flutter.actions.FlutterBuildActionGroup$AAR"/>
        <action id="flutter.build.apk" text="Build APK" description="Building a Flutter app for general distribution"
                class="io.flutter.actions.FlutterBuildActionGroup$APK"/>
        <!--suppress PluginXmlCapitalization -->
        <action id="flutter.build.aab" text="Build App Bundle" description="Building a Flutter app for Google Play Store distribution"
                class="io.flutter.actions.FlutterBuildActionGroup$AppBundle"/>
        <!--suppress PluginXmlCapitalization -->
        <action id="flutter.build.ios" text="Build iOS" description="Building a Flutter app for Apple App Store distribution"
                class="io.flutter.actions.FlutterBuildActionGroup$Ios"/>
      </group>
      <add-to-group group-id="BuildMenu" anchor="first"/>
    </group>

    <!-- main toolbar run actions -->
    <action id="AttachDebuggerAction"
            class="io.flutter.actions.AttachDebuggerAction"
            text="Flutter Attach"
            description="Attach debugger to a Flutter process embedded in an Android app"
            icon="FlutterIcons.AttachDebugger">
      <add-to-group group-id="ToolbarRunGroup" anchor="after" relative-to-action="RunnerActions"/>
    </action>
    <action id="Flutter.Toolbar.ReloadAction" class="io.flutter.actions.ReloadFlutterAppRetarget"
            description="Reload"
            icon="FlutterIcons.HotReload">
      <add-to-group group-id="ToolbarRunGroup" anchor="after" relative-to-action="RunnerActions"/>
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl BACK_SLASH"/>
    </action>

    <!-- run menu actions -->
    <group id="Flutter.MenuActions.Run">
      <separator/>
      <reference ref="Flutter.Toolbar.ReloadAction"/>
      <action id="Flutter.Toolbar.RestartAction" class="io.flutter.actions.RestartFlutterAppRetarget"
              description="Restart"
              icon="FlutterIcons.HotRestart">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift BACK_SLASH"/>
      </action>
      <action id="Flutter.Toolbar.ReloadAllAction" class="io.flutter.actions.ReloadAllFlutterAppsRetarget"
              description="Reload All Devices"
              icon="FlutterIcons.HotReload">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt BACK_SLASH"/>
      </action>
      <action id="Flutter.Toolbar.RestartAllAction" class="io.flutter.actions.RestartAllFlutterAppsRetarget"
              description="Restart All Devices"
              icon="FlutterIcons.HotRestart">
        <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt shift BACK_SLASH"/>
      </action>
      <separator/>
      <action id="Flutter.Menu.RunProfileAction" class="io.flutter.actions.RunProfileFlutterApp"
              description="Flutter Run Profile Mode"
              icon="AllIcons.Actions.Execute">
      </action>
      <action id="Flutter.Menu.RunReleaseAction" class="io.flutter.actions.RunReleaseFlutterApp"
              description="Flutter Run Release Mode"
              icon="AllIcons.Actions.Execute">
      </action>
      <reference ref="AttachDebuggerAction"/>
      <separator/>
      <add-to-group group-id="RunMenu" anchor="after" relative-to-action="Stop"/>
    </group>

    <!-- refactoring menu -->
    <action class="io.flutter.actions.ExtractWidgetAction" id="Flutter.ExtractWidget" text="Extract Flutter Widget...">
      <add-to-group group-id="IntroduceActionsGroup" anchor="after" relative-to-action="ExtractMethod"/>
      <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt W"/>
    </action>

    <!-- help menu -->
    <action class="io.flutter.actions.FlutterGettingStartedAction" id="Flutter.FlutterHelp" text="Flutter Plugin Help">
      <add-to-group group-id="HelpMenu" anchor="after" relative-to-action="HelpTopics"/>
    </action>

    <action id="io.flutter.RestartDaemon" class="io.flutter.actions.RestartFlutterDaemonAction"
            text="Restart Flutter Daemon" description="Restart Flutter Daemon" icon="FlutterIcons.Flutter">
    </action>

    <action id="io.flutter.OpenDevToolsAction" class="io.flutter.run.OpenDevToolsAction"
            text="Open Flutter DevTools" description="Open Flutter DevTools" icon="FlutterIcons.Dart_16">
    </action>

    <!-- action
      id="DeveloperServices.FlutterNewsAssistant"
      class="io.flutter.actions.OpenFlutterNewsSidePanelAction"
      icon="/icons/flutter.png"
      text="What's New in Flutter">
      <add-to-group group-id="HelpMenu" />
    </action -->

  </actions>

  <applicationListeners>
    <listener class="io.flutter.font.ProjectOpenListener"
              topic="com.intellij.openapi.project.ProjectManagerListener"/>
  </applicationListeners>

  <projectListeners>
    <listener class="io.flutter.view.FlutterViewFactory$FlutterViewListener" topic="com.intellij.openapi.wm.ex.ToolWindowManagerListener"/>
    <listener class="io.flutter.performance.FlutterPerformanceViewFactory$FlutterPerformanceViewListener"
              topic="com.intellij.openapi.wm.ex.ToolWindowManagerListener"/>
    <listener class="io.flutter.preview.PreviewViewFactory$PreviewViewListener"
              topic="com.intellij.openapi.wm.ex.ToolWindowManagerListener"/>
  </projectListeners>

  <extensionPoints>
    <extensionPoint name="gradleSyncProvider" interface="io.flutter.android.GradleSyncProvider"/>
    <extensionPoint name="colorPickerProvider" interface="io.flutter.editor.ColorPickerProvider"/>
  </extensionPoints>

  <extensions defaultExtensionNs="io.flutter">
    <gradleSyncProvider implementation="io.flutter.android.IntellijGradleSyncProvider" order="last"/>
    <colorPickerProvider implementation="io.flutter.editor.IntellijColorPickerProvider" order="last"/>
  </extensions>

  <extensions defaultExtensionNs="com.intellij">
    <postStartupActivity implementation="io.flutter.ProjectOpenActivity"/>
    <postStartupActivity implementation="io.flutter.FlutterInitializer"/>
    <projectService serviceInterface="io.flutter.run.daemon.DeviceService"
                    serviceImplementation="io.flutter.run.daemon.DeviceService"/>
    <projectService serviceInterface="io.flutter.run.daemon.DevToolsService"
                    serviceImplementation="io.flutter.run.daemon.DevToolsService"/>
    <projectService serviceInterface="io.flutter.dart.FlutterDartAnalysisServer"
                    serviceImplementation="io.flutter.dart.FlutterDartAnalysisServer"/>
    <projectService serviceInterface="io.flutter.bazel.WorkspaceCache"
                    serviceImplementation="io.flutter.bazel.WorkspaceCache"/>
    <projectService serviceImplementation="io.flutter.pub.PubRootCache"/>

    <configurationType implementation="io.flutter.run.FlutterRunConfigurationType"/>
    <runConfigurationProducer implementation="io.flutter.run.FlutterRunConfigurationProducer"/>
    <programRunner implementation="io.flutter.run.FlutterRunner"/>

    <configurationType implementation="io.flutter.run.test.FlutterTestConfigType"/>
    <runConfigurationProducer implementation="io.flutter.run.test.FlutterTestConfigProducer"/>
    <programRunner implementation="io.flutter.run.test.FlutterTestRunner"/>
    <runLineMarkerContributor language="Dart" implementationClass="io.flutter.run.test.FlutterTestLineMarkerContributor"/>

    <configurationType implementation="io.flutter.run.bazel.FlutterBazelRunConfigurationType"/>
    <programRunner implementation="io.flutter.run.bazel.BazelRunner"/>

    <configurationType implementation="io.flutter.run.bazelTest.FlutterBazelTestConfigurationType"/>
    <runConfigurationProducer implementation="io.flutter.run.bazelTest.BazelTestConfigProducer"/>
    <runConfigurationProducer implementation="io.flutter.run.bazelTest.BazelWatchTestConfigProducer"/>
    <programRunner implementation="io.flutter.run.bazelTest.BazelTestRunner"/>
    <runLineMarkerContributor language="Dart" implementationClass="io.flutter.run.bazelTest.FlutterBazelTestLineMarkerContributor"/>

    <defaultLiveTemplatesProvider implementation="io.flutter.template.FlutterLiveTemplatesProvider"/>
    <liveTemplateContext implementation="io.flutter.template.DartToplevelTemplateContextType"/>

    <!-- IDEA only -->
    <moduleBuilder builderClass="io.flutter.module.FlutterModuleBuilder"/>

    <projectService serviceImplementation="io.flutter.sdk.FlutterSdkManager"/>
    <projectService serviceImplementation="io.flutter.sdk.AndroidEmulatorManager"/>

    <applicationService serviceInterface="io.flutter.settings.FlutterSettings"
                        serviceImplementation="io.flutter.settings.FlutterSettings"
                        overrides="false"/>

    <applicationService serviceImplementation="io.flutter.jxbrowser.EmbeddedBrowserEngine" overrides="false" />
    <applicationService serviceImplementation="io.flutter.font.FontPreviewProcessor"/>
    <console.folding implementation="io.flutter.console.FlutterConsoleFolding"/>
    <console.folding implementation="io.flutter.logging.FlutterConsoleLogFolding"/>

    <projectConfigurable groupId="language" instance="io.flutter.sdk.FlutterSettingsConfigurable"
                         id="flutter.settings" key="flutter.title" bundle="io.flutter.FlutterBundle" nonDefaultProject="true"/>
    <colorProvider implementation="io.flutter.editor.FlutterColorProvider"/>
    <codeInsight.lineMarkerProvider language="Dart" implementationClass="io.flutter.editor.FlutterIconLineMarkerProvider"/>
    <errorHandler implementation="io.flutter.FlutterErrorReportSubmitter"/>

    <toolWindow id="Flutter Outline" anchor="right" icon="FlutterIcons.Flutter_13"
                factoryClass="io.flutter.preview.PreviewViewFactory"/>
    <projectService serviceImplementation="io.flutter.preview.PreviewView" overrides="false"/>

    <toolWindow id="Flutter Inspector" anchor="right" icon="FlutterIcons.Flutter_13"
                factoryClass="io.flutter.view.FlutterViewFactory"/>
    <projectService serviceImplementation="io.flutter.view.FlutterView" overrides="false"/>

    <toolWindow id="Flutter Performance" anchor="right" icon="FlutterIcons.Flutter_13"
                factoryClass="io.flutter.performance.FlutterPerformanceViewFactory"/>
    <projectService serviceImplementation="io.flutter.performance.FlutterPerformanceView" overrides="false"/>

    <projectOpenProcessor id="flutter" implementation="io.flutter.project.FlutterProjectOpenProcessor" order="first"/>

    <localInspection bundle="io.flutter.FlutterBundle" key="outdated.dependencies.inspection.name"
                     groupName="Flutter" enabledByDefault="true" level="WARNING" language="Dart"
                     implementationClass="io.flutter.inspections.FlutterDependencyInspection"/>

    <editorNotificationProvider implementation="io.flutter.editor.FlutterBazelSettingsNotificationProvider"/>
    <editorNotificationProvider implementation="io.flutter.editor.FlutterPubspecNotificationProvider"/>
    <editorNotificationProvider implementation="io.flutter.inspections.SdkConfigurationNotificationProvider"/>
    <editorNotificationProvider implementation="io.flutter.editor.NativeEditorNotificationProvider"/>
    <editorNotificationProvider implementation="io.flutter.samples.FlutterSampleNotificationProvider"/>

    <projectService serviceInterface="io.flutter.run.FlutterReloadManager"
                    serviceImplementation="io.flutter.run.FlutterReloadManager"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.editor.FlutterSaveActionsManager"
                    serviceImplementation="io.flutter.editor.FlutterSaveActionsManager"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.run.FlutterAppManager"
                    serviceImplementation="io.flutter.run.FlutterAppManager"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.perf.FlutterWidgetPerfManager"
                    serviceImplementation="io.flutter.perf.FlutterWidgetPerfManager"
                    overrides="false"/>

    <projectService serviceInterface="io.flutter.editor.ActiveEditorsOutlineService"
                    serviceImplementation="io.flutter.editor.ActiveEditorsOutlineService"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.editor.EditorMouseEventService"
                    serviceImplementation="io.flutter.editor.EditorMouseEventService"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.editor.EditorPositionService"
                    serviceImplementation="io.flutter.editor.EditorPositionService"
                    overrides="false"/>
    <projectService serviceInterface="io.flutter.inspector.InspectorGroupManagerService"
                    serviceImplementation="io.flutter.inspector.InspectorGroupManagerService"
                    overrides="false"/>

    <iconProvider implementation="io.flutter.project.FlutterIconProvider" order="first"/>

    <library.type implementation="io.flutter.sdk.FlutterPluginLibraryType"/>

    <projectStructureDetector implementation="io.flutter.project.FlutterProjectStructureDetector"/>
    <additionalTextAttributes scheme="Default" file="colorSchemes/FlutterLogColorSchemeDefault.xml"/>
    <additionalTextAttributes scheme="Default" file="colorSchemes/FlutterCodeColorSchemeDefault.xml"/>
    <search.optionContributor implementation="io.flutter.sdk.FlutterSearchableOptionContributor"/>

    <projectService serviceInterface="io.flutter.editor.WidgetIndentsHighlightingPassFactory"
                    serviceImplementation="io.flutter.editor.WidgetIndentsHighlightingPassFactory"
                    overrides="false"/>
    <highlightingPassFactory implementation="io.flutter.editor.WidgetIndentsHighlightingPassFactoryRegistrar"/>
    <projectService serviceInterface="io.flutter.jxbrowser.EmbeddedBrowser"
                    serviceImplementation="io.flutter.jxbrowser.EmbeddedBrowser"
                    overrides="false"/>
  </extensions>

  <!-- Dart Plugin extensions -->
  <extensions defaultExtensionNs="Dart">
    <completionExtension implementation="io.flutter.editor.FlutterCompletionContributor" order="last"/>
  </extensions>

</idea-plugin>
